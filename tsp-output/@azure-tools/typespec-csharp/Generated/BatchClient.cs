// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Autorest.CSharp.Core;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Compute.Batch
{
    // Data plane generated client.
    /// <summary> The Batch service client. </summary>
    public partial class BatchClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of BatchClient. </summary>
        public BatchClient() : this(new BatchClientOptions())
        {
        }

        /// <summary> Initializes a new instance of BatchClient. </summary>
        /// <param name="options"> The options for configuring the client. </param>
        public BatchClient(BatchClientOptions options)
        {
            options ??= new BatchClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools1sAsync(string,IEnumerable{string},IEnumerable{string},CancellationToken)']/*" />
        public virtual async Task<Response<BatchPoolListResult>> GetPools1sAsync(string filter = null, IEnumerable<string> select = null, IEnumerable<string> expand = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetPools1sAsync(filter, select, expand, context).ConfigureAwait(false);
            return Response.FromValue(BatchPoolListResult.FromResponse(response), response);
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools1s(string,IEnumerable{string},IEnumerable{string},CancellationToken)']/*" />
        public virtual Response<BatchPoolListResult> GetPools1s(string filter = null, IEnumerable<string> select = null, IEnumerable<string> expand = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetPools1s(filter, select, expand, context);
            return Response.FromValue(BatchPoolListResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Pools in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPools1sAsync(string,IEnumerable{string},IEnumerable{string},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools1sAsync(string,IEnumerable{string},IEnumerable{string},RequestContext)']/*" />
        public virtual async Task<Response> GetPools1sAsync(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("BatchClient.GetPools1s");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPools1sRequest(filter, select, expand, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Pools in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPools1s(string,IEnumerable{string},IEnumerable{string},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools1s(string,IEnumerable{string},IEnumerable{string},RequestContext)']/*" />
        public virtual Response GetPools1s(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("BatchClient.GetPools1s");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPools1sRequest(filter, select, expand, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools2sAsync(string,IEnumerable{string},IEnumerable{string},CancellationToken)']/*" />
        public virtual async Task<Response<BatchPoolListResult>> GetPools2sAsync(string filter = null, IEnumerable<string> select = null, IEnumerable<string> expand = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await GetPools2sAsync(filter, select, expand, context).ConfigureAwait(false);
            return Response.FromValue(BatchPoolListResult.FromResponse(response), response);
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools2s(string,IEnumerable{string},IEnumerable{string},CancellationToken)']/*" />
        public virtual Response<BatchPoolListResult> GetPools2s(string filter = null, IEnumerable<string> select = null, IEnumerable<string> expand = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = GetPools2s(filter, select, expand, context);
            return Response.FromValue(BatchPoolListResult.FromResponse(response), response);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Pools in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPools2sAsync(string,IEnumerable{string},IEnumerable{string},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools2sAsync(string,IEnumerable{string},IEnumerable{string},RequestContext)']/*" />
        public virtual async Task<Response> GetPools2sAsync(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("BatchClient.GetPools2s");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPools2sRequest(filter, select, expand, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Pools in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPools2s(string,IEnumerable{string},IEnumerable{string},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools2s(string,IEnumerable{string},IEnumerable{string},RequestContext)']/*" />
        public virtual Response GetPools2s(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            using var scope = ClientDiagnostics.CreateScope("BatchClient.GetPools2s");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPools2sRequest(filter, select, expand, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools3sAsync(string,IEnumerable{string},IEnumerable{string},CancellationToken)']/*" />
        public virtual AsyncPageable<BatchPool> GetPools3sAsync(string filter = null, IEnumerable<string> select = null, IEnumerable<string> expand = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetPools3sRequest(filter, select, expand, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetPools3sNextPageRequest(nextLink, filter, select, expand, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, BatchPool.DeserializeBatchPool, ClientDiagnostics, _pipeline, "BatchClient.GetPools3s", "value", "odata.nextLink", context);
        }

        /// <summary> Lists all of the Pools in the specified Account. </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools3s(string,IEnumerable{string},IEnumerable{string},CancellationToken)']/*" />
        public virtual Pageable<BatchPool> GetPools3s(string filter = null, IEnumerable<string> select = null, IEnumerable<string> expand = null, CancellationToken cancellationToken = default)
        {
            RequestContext context = cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null;
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetPools3sRequest(filter, select, expand, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetPools3sNextPageRequest(nextLink, filter, select, expand, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, BatchPool.DeserializeBatchPool, ClientDiagnostics, _pipeline, "BatchClient.GetPools3s", "value", "odata.nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Pools in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPools3sAsync(string,IEnumerable{string},IEnumerable{string},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools3sAsync(string,IEnumerable{string},IEnumerable{string},RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetPools3sAsync(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetPools3sRequest(filter, select, expand, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetPools3sNextPageRequest(nextLink, filter, select, expand, context);
            return GeneratorPageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "BatchClient.GetPools3s", "value", "odata.nextLink", context);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Pools in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description>
        /// This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
        /// </description>
        /// </item>
        /// <item>
        /// <description>
        /// Please try the simpler <see cref="GetPools3s(string,IEnumerable{string},IEnumerable{string},CancellationToken)"/> convenience overload with strongly typed models first.
        /// </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/BatchClient.xml" path="doc/members/member[@name='GetPools3s(string,IEnumerable{string},IEnumerable{string},RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetPools3s(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => CreateGetPools3sRequest(filter, select, expand, context);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => CreateGetPools3sNextPageRequest(nextLink, filter, select, expand, context);
            return GeneratorPageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => BinaryData.FromString(e.GetRawText()), ClientDiagnostics, _pipeline, "BatchClient.GetPools3s", "value", "odata.nextLink", context);
        }

        internal HttpMessage CreateGetPools1sRequest(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/pools1", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (select != null && Optional.IsCollectionDefined(select))
            {
                uri.AppendQueryDelimited("$select", select, ",", true);
            }
            if (expand != null && Optional.IsCollectionDefined(expand))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPools2sRequest(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/pools2", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (select != null && Optional.IsCollectionDefined(select))
            {
                uri.AppendQueryDelimited("$select", select, ",", true);
            }
            if (expand != null && Optional.IsCollectionDefined(expand))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPools3sRequest(string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/pools3", false);
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (select != null && Optional.IsCollectionDefined(select))
            {
                uri.AppendQueryDelimited("$select", select, ",", true);
            }
            if (expand != null && Optional.IsCollectionDefined(expand))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPools3sNextPageRequest(string nextLink, string filter, IEnumerable<string> select, IEnumerable<string> expand, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
